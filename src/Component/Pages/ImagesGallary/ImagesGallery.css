/* --- Gallery Container Styles --- */
.image-gallery-grid {
    display: grid;
    /* Define 5 equal columns for fine control */
    grid-template-columns: repeat(5, 1fr); 
    /* Define 4 equal rows (or more if needed) */
    grid-template-rows: repeat(4, auto); 
    /* The white lines in your image are the gap */
    gap: 10px; 
    width: 100%;
    /* Maximize height to prevent stretching on a small number of images */
    aspect-ratio: 16 / 9; 
}

/* --- Image Card Styles (General) --- */
.image-card-item {
    overflow: hidden; /* Important to keep the image within the card bounds */
}

.image-card-item img {
    width: 100%;
    height: 100%;
    /* Ensure the image covers the entire card without distortion */
    object-fit: cover; 
    display: block;
}

/* --- Image Positioning (Matching the Provided Layout) --- */

/* Note: You will need a unique class for each item to place it. 
   Assuming you have 18-20 image items total based on the layout. 
   Below are examples for the first 5 images based on your component's initial state: */

/* Image 1: Top-Left Square (1 column, 1 row) */
.image-card-1 {
    grid-column: 1 / span 1; 
    grid-row: 1 / span 1;
}

/* Image 2: Thin rectangle next to Image 1 (0.5 columns, 1 row) */
/* The layout is complex. Let's make the column span specific. */
.image-card-2 {
    /* Starts at column 2, spans 1/3 of a column */
    grid-column: 2 / 3; 
    grid-row: 1 / 2;
}

/* Image 3: Medium rectangle below Image 1/2 */
.image-card-3 {
    grid-column: 1 / 2;
    grid-row: 2 / 3;
}

/* Image 4: The large center-left square/rectangle (2 columns, 2 rows) */
.image-card-4 {
    /* You may need to adjust the column/row counts for an exact fit */
    grid-column: 3 / span 2; 
    grid-row: 2 / span 2;
}

/* Image 5: The medium rectangle on the far right (1 column, 2 rows) */
.image-card-5 {
    grid-column: 5 / 6;
    grid-row: 1 / span 2;
}

/* ... continue defining classes for all subsequent images (e.g., .image-card-6, .image-card-7, etc.) 
   to fill the rest of the layout using grid-column and grid-row. */

   /* Grid layout for images */
.image-gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    padding: 20px;
}

/* Fixed Inquiry Button */
.inquiry-btn  {
    position: fixed;
    bottom: 30px;
    right: 30px;
    z-index: 1050;
    border-radius: 50px;
    padding: 12px 20px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    background-color: #dcaf46;
    color: #fff;
    font-weight: 500;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
    animation: float 3s ease-in-out infinite; /* continuous floating */
    border: 2px solid #dcaf46;
}
.submit-btn{
 
    z-index: 1050;
    border-radius: 50px;
    padding: 12px 20px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    background-color: #dcaf46;
    color: #fff;
    font-weight: 500;
    cursor: pointer;
    
    border: 2px solid #dcaf46;

}
/* Hover effects for user interaction */
.inquiry-btn:hover {
    transform: scale(1.1) translateY(-5px);
    box-shadow: 0 8px 15px rgba(0,0,0,0.3);
    background-color: #dcaf46;
    border: 2px solid #dcaf46;
}

.inquiry-btn:active {
    transform: scale(1.1) translateY(-5px);
    box-shadow: 0 8px 15px rgba(0,0,0,0.3);
    background-color: #dcaf46 !important;
    border: 2px solid #dcaf46 !important;
}
/* Floating animation */
@keyframes float {
    0% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
    100% { transform: translateY(0); }
}
